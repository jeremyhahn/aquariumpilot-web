<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
		<title><?php echo $title ?></title>
		<link rel="stylesheet" type="text/css" href="/view/css/style.css"/>
		<link rel="stylesheet" type="text/css" href="/view/js/extjs/resources/css/ext-all.css" />
		<!-- <link id="theme" rel="stylesheet" href="/view/js/extjs/resources/css/ext-neptune.css" /> -->
    	<link rel="stylesheet" type="text/css" href="/view/css/portal.css" />
    	<link rel="stylesheet" type="text/css" href="/view/css/app.css" />

		<!-- ExtJS -->
		<script type="text/javascript" src="/view/js/extjs/ext.js"></script>
		<script type="text/javascript" src="/view/js/all-classes.js"></script>

		<!--  HighCharts / JQuery -->
        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
        <script type="text/javascript" src="/view/js/highcharts/js/highcharts.src.js"></script>

		<!-- RGraph -->
		<script src="/view/js/RGraph/libraries/RGraph.common.core.js" ></script>
        <script src="/view/js/RGraph/libraries/RGraph.common.effects.js" ></script>
        <script src="/view/js/RGraph/libraries/RGraph.thermometer.js" ></script>

		<!-- shared example code -->
		<!-- <script type="text/javascript" src="/view/js/extjs/examples/shared/examples.js"></script> -->

		<!-- portal classes --><!--
        <script type="text/javascript" src="classes/Portlet.js"></script>
        <script type="text/javascript" src="classes/PortalColumn.js"></script>
        <script type="text/javascript" src="classes/PortalPanel.js"></script>
        <script type="text/javascript" src="classes/PortalDropZone.js"></script>
        
         example portlets
        <script type="text/javascript" src="classes/GridPortlet.js"></script>
        <script type="text/javascript" src="classes/ChartPortlet.js"></script>

         app
        -->

		<!-- The app -->
		<script type="text/javascript" src="/AgilePHP/AgilePHP.js"></script>
		<script type="text/javascript" src="/view/js/portal.js"></script>
		<script type="text/javascript" src="/view/js/window-waterchange.js"></script>
        <script type="text/javascript">
            Ext.Loader.setPath('Ext.app', 'classes');

            Ext.require([
                //'Ext.diag.layout.ContextItem.*',
                //'Ext.diag.layout.Context.*',
    
                'Ext.layout.container.*',
                'Ext.resizer.Splitter',
                'Ext.fx.target.Element',
                'Ext.fx.target.Component',
                'Ext.window.Window',
                'Ext.window.MessageBox',
                'Ext.app.Portlet',
                'Ext.app.PortalColumn',
                'Ext.app.PortalPanel',
                'Ext.app.Portlet',
                'Ext.app.PortalDropZone',
                'Ext.app.GridPortlet',
                'Ext.app.ChartPortlet'
            ]);

            Ext.onReady(function() {

                Ext.create('Ext.app.Portal');
                pollWaterworks();
                renderCharts();

                //Ext.util.CSS.swapStyleSheet('theme', '/view/js/extjs/resources/css/ext-neptune.css');

             	// Set event handlers for button clicks / toggles
                Ext.getCmp('outlet1').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle0/' + value
                	});
                });

                Ext.getCmp('outlet2').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle1/' + value
                	});
                });

                Ext.getCmp('outlet3').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle2/' + value
                	});
                });

                Ext.getCmp('outlet4').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle3/' + value
                	});
                });

                Ext.getCmp('outlet5').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle4/' + value
                	});
                });

                Ext.getCmp('outlet6').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle5/' + value
                	});
                });

                Ext.getCmp('outlet7').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle6/' + value
                	});
                });

                Ext.getCmp('outlet8').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReceptacle7/' + value
                	});
                });

                Ext.getCmp('rodiAquarium').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setAquariumRodi/' + value
                	});
                });

                Ext.getCmp('rodiReservoir').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setReservoirRodi/' + value
                	});
                });

                Ext.getCmp('aquariumDrain').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setAquariumDrain/' + value
                	});
                });

                Ext.getCmp('waterchange').on('click', function(button, pressed) {
                	Ext.Msg.prompt('Water Change', 'How many gallons?', function(btn, text) {
            		    if (btn == 'ok') {
            		    	if(isNaN(text)) {
            		    		Ext.Msg.show({
            		    		     title:'Error',
            		    		     msg: 'Number required.',
            		    		     buttons: Ext.Msg.OK,
            		    		     icon: Ext.Msg.ERROR
            		    		});
            		    		return false;
            		    	}
            		    	if(text <= 0) {
            		    		Ext.Msg.show({
            		    		     title:'Error',
            		    		     msg: 'Gallons must be greater than zero.',
            		    		     buttons: Ext.Msg.OK,
            		    		     icon: Ext.Msg.ERROR
            		    		});
            		    		return false;
            		    	}
            		    	Ext.Ajax.request({
                                method: 'GET',
                                url: '/index.php/WaterworksController/setWaterchange/' + text,
                                success: function(result, request) {
            		    			Ext.getCmp('waterworks-bbar').update('Performing water change...');
            		    		}
                        	});
            		    }
            		});
                });

                Ext.getCmp('maintenance').on('toggle', function(button, pressed) {
                    var value = pressed ? '1' : '0';
                	Ext.Ajax.request({
                        method: 'GET',
                        url: '/index.php/WaterworksController/setMaintenance/' + value
                	});
                	if(pressed) {
      		    	   Ext.getCmp('waterchange').disable();
      		    	   Ext.getCmp('waterworks-bbar').update('Maintenance mode...');
                	}
      		    	else {
      		    	   Ext.getCmp('waterchange').enable();
      		    	   Ext.getCmp('waterworks-bbar').update('Ready');
      		    	}
                });  
            });

            function pollWaterworks() {

            	Ext.getCmp('waterworks-bbar').update('Loading...');

                function getThermometerColor(temp) {
    
                	//return temp < 80 ? ['rgba(0,0,255,1)'] : ['rgba(255,0,0,1)'];
    
                	var grad = thermometer.context.createLinearGradient(15,0,85,0);
    
                	if(temp < 80) {
    
                        grad.addColorStop(0,'blue');
                        grad.addColorStop(0.5,'#99f');
                        grad.addColorStop(1,'blue');
                	}
                	else {
    
                        grad.addColorStop(0,'red');
                        grad.addColorStop(0.5,'#E97');
                        grad.addColorStop(1,'red');
                	}
    
                	return [grad];
                }

	            // Aquarium water temperature
                var thermometer = new RGraph.Thermometer('aquarium-water-temp', 0, 100, <?php echo $aquarium_water_temp; ?>);
                thermometer.Set('chart.colors', getThermometerColor(<?php echo $aquarium_water_temp; ?>));
    	        thermometer.Set('chart.scale.decimals', 2);
    	        thermometer.Set('chart.shadow', false);
                thermometer.Draw();

            	// Aquarium water surface temperature
                var thermometer2 = new RGraph.Thermometer('aquarium-surface-temp', 0, 100, <?php echo $aquarium_surface_temp; ?>);
                thermometer2.Set('chart.colors', getThermometerColor(<?php echo $aquarium_surface_temp; ?>));
                thermometer2.Set('chart.scale.decimals', 2);
                thermometer2.Set('chart.shadow', false);
                thermometer2.Draw();

             	// Aquarium room temperature
                var thermometer3 = new RGraph.Thermometer('aquarium-room-temp', 0, 100, <?php echo $aquarium_room_temp; ?>);
                thermometer3.Set('chart.colors', getThermometerColor(<?php echo $aquarium_room_temp; ?>));
                thermometer3.Set('chart.scale.decimals', 2);
                thermometer3.Set('chart.shadow', false);
                thermometer3.Draw();

                // Saltwater Reservoir Temperature
                var thermometer4 = new RGraph.Thermometer('waterworks-reservoir-thermometer', 0, 100, <?php echo $waterworks_reservoir_temp; ?>);
                thermometer4.Set('chart.colors', getThermometerColor(<?php echo $waterworks_reservoir_temp; ?>));
                thermometer4.Set('chart.scale.decimals', 2);
                thermometer4.Set('chart.shadow', false);
                thermometer4.Draw();

                Ext.Ajax.request({
                    method: 'GET',
                    url: '/index.php/WaterworksController/getStatus',
                    params: {},
                    success: function(result, request) {

                    	Ext.getCmp('waterworks-bbar').update('Ready');

                    	try {

                    		// This throws Ext.ex if this isnt valid json 
                           	var waterworks = Ext.decode(result.responseText);
                    	}
                    	catch(err) {

							console.log(err);

							if(result.responseText == '' || result.responseText.match(/offline/))
							   Ext.getCmp('waterworks-bbar').update('Offline...');

                        	return;
                    	}

                        console.log(waterworks);

                        // Waterworks buttons
                        if(waterworks.receptacle0 == '1') Ext.getCmp('outlet1').toggle(waterworks.receptacle0 == '1', true);
                        if(waterworks.receptacle1 == '1') Ext.getCmp('outlet2').toggle(waterworks.receptacle1 == '1', true);
                        if(waterworks.receptacle2 == '1') Ext.getCmp('outlet3').toggle(waterworks.receptacle2 == '1', true);
                        if(waterworks.receptacle3 == '1') Ext.getCmp('outlet4').toggle(waterworks.receptacle3 == '1', true);
                        if(waterworks.receptacle4 == '1') Ext.getCmp('outlet5').toggle(waterworks.receptacle4 == '1', true);
                        if(waterworks.receptacle5 == '1') Ext.getCmp('outlet6').toggle(waterworks.receptacle5 == '1', true);
                        if(waterworks.receptacle6 == '1') Ext.getCmp('outlet7').toggle(waterworks.receptacle6 == '1', true);
                        if(waterworks.receptacle7 == '1') Ext.getCmp('outlet8').toggle(waterworks.receptacle7 == '1', true);
                        if(waterworks.aquariumRodi == '1') Ext.getCmp('rodiAquarium').toggle(waterworks.aquariumRodi == '1', true);
                        if(waterworks.reservoirRodi == '1') Ext.getCmp('rodiReservoir').toggle(waterworks.reservoirRodi == '1', true);
                        if(waterworks.aquariumDrain == '1') Ext.getCmp('aquariumDrain').toggle(waterworks.aquariumDrain == '1', true);
                        if(waterworks.waterChangeInProgress == '1') {
                            Ext.getCmp('waterchange').disable();
                            Ext.getCmp('waterworks-bbar').update('Performing water change...');
                        }
                        else {
                        	Ext.getCmp('waterchange').enable();
                        }
                        if(waterworks.maintenanceInProgress == '1') {
                        	Ext.getCmp('waterchange').disable();
                            Ext.getCmp('maintenance').toggle(true, true);
                            Ext.getCmp('waterworks-bbar').update('Maintenance mode...');
                        }

                        thermometer3 = null;
                        thermometer3 = new RGraph.Thermometer('waterworks-reservoir-thermometer', 0, 100, parseFloat(waterworks.reservoirTemp));
                        thermometer3.Set('chart.colors', getThermometerColor(waterworks.reservoirTemp));
                        thermometer3.Set('chart.scale.decimals', 2);
                        thermometer3.Set('chart.shadow', false);
                        thermometer3.Draw();
                    }                      
                });

                setTimeout('pollWaterworks()', 30000);
            }

            function renderCharts() {
            	$(function () {
            	    $(document).ready(function() {
            	        Highcharts.setOptions({
            	            global: {
            	                useUTC: false
            	            }
            	        });
            	    
            	        var chart;
            	        chart = new Highcharts.Chart({
            	            chart: {
            	                renderTo: 'aquarium-ph',
            	                defaultSeriesType: 'spline',
            	                type: 'spline',
            	                marginRight: 10,
            	                width: 490,
            	                events: {
            	                    load: function() {

            	        				// set up the updating of the chart each second
            	                        var series = this.series[0];
            	                        setInterval(function() {

            	                        	$.getJSON('/index.php/AquariumController/getPh', function(response) {

            	                                var point = [ (new Date()).getTime(), parseFloat(response.pH) ];
            	                                series.addPoint(point, true, true);
            	                            })
            	                        }, 5000);
            	                    }
            	                }
            	            },
            	            title: {
            	                text: 'Live Aquarium pH'
            	            },
            	            xAxis: {
            	                type: 'datetime',
            	                tickPixelInterval: 150
            	            },
            	            yAxis: {
            	                title: {
            	                    text: 'pH'
            	                },
            	                plotLines: [{
            	                    value: 0,
            	                    width: 1,
            	                    color: '#808080'
            	                }]
            	            },
            	            tooltip: {
            	                formatter: function() {
            	                        return '<b>'+ this.series.name +'</b><br/>'+
            	                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) +'<br/>'+
            	                        Highcharts.numberFormat(this.y, 2);
            	                }
            	            },
            	            credits : {
            	                text : ''
            	            },
            	            legend: {
            	                enabled: false
            	            },
            	            exporting: {
            	                enabled: false
            	            },
            	            series: [{
            	                name: 'pH',
            	                data: [ (new Date().getTime()), 0]
            	            }]
            	        });
            	    });
            	    
            	});
            }
            
        </script>
	</head>
	<body>
    	<span id="app-msg" style="display:none;"></span>
	</body>
</html>
